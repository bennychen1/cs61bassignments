1a. Results for InsertRandomSpeedTest for N = 1000000:
BSTStringset: 1.40 sec
ECHashStringSet: 0.61 sec
TreeSet: 1.37 sec
HashSet: 0.76 sec


1b. Results for InsertRandomSpeedTest for N = 2000000:
BSTStringSet: 3.10 sec
ECHashStringSet: 1.33 sec
TreeSet: 3.17 sec
HashSet: 1.61 sec


1c. Does your ECHashStringSet look roughly linear or roughly quadratic
in its scaling behavior for random strings?

The time a bit more than doubled from 0.61 sec to 1.37 sec. This is rougly linear.

2a. Results for InsertInOrderSpeedTest for N = 10000:
BSTStringSet: 0.79 sec
ECHashStringSet: 0.01 sec
TreeSet: 0.02 sec
HashSet: 0.01 sec


2b. Results for InsertInOrderSpeedTest for N = 20000:
BSTStringSet: 1.58 sec
ECHashStringSet: 0.02 sec
TreeSet: 0.03 sec
HashSet: 0.02 sec

2c. Does your **BST**StringSet look roughly linear or roughly
quadratic in its scaling behavior for in order strings?
The time exactly doubled form a size of 10000 strings to a size of 20000 strings. The runtime
appears linear.


Before submitting, make sure that your ECHashStringSet is capable of
handling inputs of size 1000000 in a reasonable amount of time (a few
seconds).

